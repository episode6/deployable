buildscript {
  ext {
    // In order to deploy this plugin using itself, we must define all our external compile dependencies on
    // the buildscript classpath as well as the normal dependency block.
    // Put them here so we don't have to write them twice
    compileDependencies = [
        "com.episode6.hackit.nestable:nestable:0.0.1",
    ]
  }
  repositories {
    jcenter()
  }
  dependencies {
    classpath compileDependencies
    classpath 'com.episode6.hackit.gdmc:gdmc:0.1.9'
  }
}

group = "com.episode6.hackit.deployable"
version = "0.2.0-SNAPSHOT"

wrapper {
  gradleVersion = "4.9"
  distributionType = "all"
}

repositories {
  jcenter()
  google()
}

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'

// Apply this plugin to itself so we don't need to duplicate the deploy logic.
GroovyScriptEngine scriptEngine = new GroovyScriptEngine([
      file('src/main/groovy').absolutePath,
      file('src/main/resources').absolutePath
    ].toArray(new String[2]),
    this.class.classLoader)
apply plugin: scriptEngine.loadScriptByName('com/episode6/hackit/deployable/DeployableJarPlugin.groovy')
apply plugin: scriptEngine.loadScriptByName('com/episode6/hackit/deployable/addon/GroovyDocAddonPlugin.groovy')

apply plugin: 'com.episode6.hackit.gdmc'

configurations {
  // A place for dependencies that must be placed in the pluginClasspath for testing
  // but do not need to be compile dependencies. (i.e. this is for plugins we need to
  // test for compatibility with)
  alsoUnderTest
}

dependencies {
  implementation localGroovy()
  implementation gradleApi()
  implementation compileDependencies

  testImplementation("org.spockframework:spock-core")  {
    exclude module: 'groovy-all'
  }
  testImplementation gradleTestKit()
  testImplementation("org.bouncycastle:bcpg-jdk15on")
  testImplementation("com.episode6.hackit.groovykit:gk-files")
  testImplementation('com.episode6.hackit.gdmc:gdmc')

  // plugins used by integration tests
  alsoUnderTest 'com.episode6.hackit.gdmc:gdmc'
  alsoUnderTest 'com.android.tools.build:gradle'
  alsoUnderTest 'org.jetbrains.kotlin:kotlin-gradle-plugin'
  alsoUnderTest 'org.jetbrains.dokka:dokka-gradle-plugin'
  alsoUnderTest 'org.jetbrains.dokka:dokka-android-gradle-plugin'
}

pluginUnderTestMetadata {
  pluginClasspath += configurations.alsoUnderTest
}

test {
  testLogging {
    showStandardStreams = true
  }
}
